#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TakingSubjectsLib.DataModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TakingSubjects")]
	public partial class TakingSubjectsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertTblClassroom(TblClassroom instance);
    partial void UpdateTblClassroom(TblClassroom instance);
    partial void DeleteTblClassroom(TblClassroom instance);
    partial void InsertTblModule(TblModule instance);
    partial void UpdateTblModule(TblModule instance);
    partial void DeleteTblModule(TblModule instance);
    partial void InsertTblOperation(TblOperation instance);
    partial void UpdateTblOperation(TblOperation instance);
    partial void DeleteTblOperation(TblOperation instance);
    partial void InsertTblRegistration(TblRegistration instance);
    partial void UpdateTblRegistration(TblRegistration instance);
    partial void DeleteTblRegistration(TblRegistration instance);
    partial void InsertTblRole(TblRole instance);
    partial void UpdateTblRole(TblRole instance);
    partial void DeleteTblRole(TblRole instance);
    partial void InsertTblRoleOperation(TblRoleOperation instance);
    partial void UpdateTblRoleOperation(TblRoleOperation instance);
    partial void DeleteTblRoleOperation(TblRoleOperation instance);
    partial void InsertTblSection(TblSection instance);
    partial void UpdateTblSection(TblSection instance);
    partial void DeleteTblSection(TblSection instance);
    partial void InsertTblSubject(TblSubject instance);
    partial void UpdateTblSubject(TblSubject instance);
    partial void DeleteTblSubject(TblSubject instance);
    partial void InsertTblUser(TblUser instance);
    partial void UpdateTblUser(TblUser instance);
    partial void DeleteTblUser(TblUser instance);
    #endregion
		
		public TakingSubjectsDataContext() : 
				base(global::TakingSubjectsLib.Properties.Settings.Default.TakingSubjectsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TakingSubjectsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TakingSubjectsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TakingSubjectsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TakingSubjectsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TblClassroom> TblClassroom
		{
			get
			{
				return this.GetTable<TblClassroom>();
			}
		}
		
		public System.Data.Linq.Table<TblModule> TblModule
		{
			get
			{
				return this.GetTable<TblModule>();
			}
		}
		
		public System.Data.Linq.Table<TblOperation> TblOperation
		{
			get
			{
				return this.GetTable<TblOperation>();
			}
		}
		
		public System.Data.Linq.Table<TblRegistration> TblRegistration
		{
			get
			{
				return this.GetTable<TblRegistration>();
			}
		}
		
		public System.Data.Linq.Table<TblRole> TblRole
		{
			get
			{
				return this.GetTable<TblRole>();
			}
		}
		
		public System.Data.Linq.Table<TblRoleOperation> TblRoleOperation
		{
			get
			{
				return this.GetTable<TblRoleOperation>();
			}
		}
		
		public System.Data.Linq.Table<TblSection> TblSection
		{
			get
			{
				return this.GetTable<TblSection>();
			}
		}
		
		public System.Data.Linq.Table<TblSubject> TblSubject
		{
			get
			{
				return this.GetTable<TblSubject>();
			}
		}
		
		public System.Data.Linq.Table<TblUser> TblUser
		{
			get
			{
				return this.GetTable<TblUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblClassroom")]
	public partial class TblClassroom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _classroomId;
		
		private string _classroomName;
		
		private string _classroomType;
		
		private int _capacity;
		
		private EntitySet<TblSection> _TblSection;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclassroomIdChanging(int value);
    partial void OnclassroomIdChanged();
    partial void OnclassroomNameChanging(string value);
    partial void OnclassroomNameChanged();
    partial void OnclassroomTypeChanging(string value);
    partial void OnclassroomTypeChanged();
    partial void OncapacityChanging(int value);
    partial void OncapacityChanged();
    #endregion
		
		public TblClassroom()
		{
			this._TblSection = new EntitySet<TblSection>(new Action<TblSection>(this.attach_TblSection), new Action<TblSection>(this.detach_TblSection));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classroomId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int classroomId
		{
			get
			{
				return this._classroomId;
			}
			set
			{
				if ((this._classroomId != value))
				{
					this.OnclassroomIdChanging(value);
					this.SendPropertyChanging();
					this._classroomId = value;
					this.SendPropertyChanged("classroomId");
					this.OnclassroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classroomName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string classroomName
		{
			get
			{
				return this._classroomName;
			}
			set
			{
				if ((this._classroomName != value))
				{
					this.OnclassroomNameChanging(value);
					this.SendPropertyChanging();
					this._classroomName = value;
					this.SendPropertyChanged("classroomName");
					this.OnclassroomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classroomType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string classroomType
		{
			get
			{
				return this._classroomType;
			}
			set
			{
				if ((this._classroomType != value))
				{
					this.OnclassroomTypeChanging(value);
					this.SendPropertyChanging();
					this._classroomType = value;
					this.SendPropertyChanged("classroomType");
					this.OnclassroomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capacity", DbType="Int NOT NULL")]
		public int capacity
		{
			get
			{
				return this._capacity;
			}
			set
			{
				if ((this._capacity != value))
				{
					this.OncapacityChanging(value);
					this.SendPropertyChanging();
					this._capacity = value;
					this.SendPropertyChanged("capacity");
					this.OncapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClassroom_TblSection", Storage="_TblSection", ThisKey="classroomId", OtherKey="classroomId")]
		public EntitySet<TblSection> TblSection
		{
			get
			{
				return this._TblSection;
			}
			set
			{
				this._TblSection.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblSection(TblSection entity)
		{
			this.SendPropertyChanging();
			entity.TblClassroom = this;
		}
		
		private void detach_TblSection(TblSection entity)
		{
			this.SendPropertyChanging();
			entity.TblClassroom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblModule")]
	public partial class TblModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _moduleId;
		
		private string _moduleName;
		
		private string _moduleSpanishName;
		
		private EntitySet<TblOperation> _TblOperation;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmoduleIdChanging(int value);
    partial void OnmoduleIdChanged();
    partial void OnmoduleNameChanging(string value);
    partial void OnmoduleNameChanged();
    partial void OnmoduleSpanishNameChanging(string value);
    partial void OnmoduleSpanishNameChanged();
    #endregion
		
		public TblModule()
		{
			this._TblOperation = new EntitySet<TblOperation>(new Action<TblOperation>(this.attach_TblOperation), new Action<TblOperation>(this.detach_TblOperation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int moduleId
		{
			get
			{
				return this._moduleId;
			}
			set
			{
				if ((this._moduleId != value))
				{
					this.OnmoduleIdChanging(value);
					this.SendPropertyChanging();
					this._moduleId = value;
					this.SendPropertyChanged("moduleId");
					this.OnmoduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string moduleName
		{
			get
			{
				return this._moduleName;
			}
			set
			{
				if ((this._moduleName != value))
				{
					this.OnmoduleNameChanging(value);
					this.SendPropertyChanging();
					this._moduleName = value;
					this.SendPropertyChanged("moduleName");
					this.OnmoduleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleSpanishName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string moduleSpanishName
		{
			get
			{
				return this._moduleSpanishName;
			}
			set
			{
				if ((this._moduleSpanishName != value))
				{
					this.OnmoduleSpanishNameChanging(value);
					this.SendPropertyChanging();
					this._moduleSpanishName = value;
					this.SendPropertyChanged("moduleSpanishName");
					this.OnmoduleSpanishNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblModule_TblOperation", Storage="_TblOperation", ThisKey="moduleId", OtherKey="moduleId")]
		public EntitySet<TblOperation> TblOperation
		{
			get
			{
				return this._TblOperation;
			}
			set
			{
				this._TblOperation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblOperation(TblOperation entity)
		{
			this.SendPropertyChanging();
			entity.TblModule = this;
		}
		
		private void detach_TblOperation(TblOperation entity)
		{
			this.SendPropertyChanging();
			entity.TblModule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblOperation")]
	public partial class TblOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _operationId;
		
		private string _operationName;
		
		private string _operationSpanishName;
		
		private int _moduleId;
		
		private EntitySet<TblRoleOperation> _TblRoleOperation;
		
		private EntityRef<TblModule> _TblModule;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnoperationIdChanging(int value);
    partial void OnoperationIdChanged();
    partial void OnoperationNameChanging(string value);
    partial void OnoperationNameChanged();
    partial void OnoperationSpanishNameChanging(string value);
    partial void OnoperationSpanishNameChanged();
    partial void OnmoduleIdChanging(int value);
    partial void OnmoduleIdChanged();
    #endregion
		
		public TblOperation()
		{
			this._TblRoleOperation = new EntitySet<TblRoleOperation>(new Action<TblRoleOperation>(this.attach_TblRoleOperation), new Action<TblRoleOperation>(this.detach_TblRoleOperation));
			this._TblModule = default(EntityRef<TblModule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int operationId
		{
			get
			{
				return this._operationId;
			}
			set
			{
				if ((this._operationId != value))
				{
					this.OnoperationIdChanging(value);
					this.SendPropertyChanging();
					this._operationId = value;
					this.SendPropertyChanged("operationId");
					this.OnoperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string operationName
		{
			get
			{
				return this._operationName;
			}
			set
			{
				if ((this._operationName != value))
				{
					this.OnoperationNameChanging(value);
					this.SendPropertyChanging();
					this._operationName = value;
					this.SendPropertyChanged("operationName");
					this.OnoperationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationSpanishName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string operationSpanishName
		{
			get
			{
				return this._operationSpanishName;
			}
			set
			{
				if ((this._operationSpanishName != value))
				{
					this.OnoperationSpanishNameChanging(value);
					this.SendPropertyChanging();
					this._operationSpanishName = value;
					this.SendPropertyChanged("operationSpanishName");
					this.OnoperationSpanishNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleId", DbType="Int NOT NULL")]
		public int moduleId
		{
			get
			{
				return this._moduleId;
			}
			set
			{
				if ((this._moduleId != value))
				{
					if (this._TblModule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmoduleIdChanging(value);
					this.SendPropertyChanging();
					this._moduleId = value;
					this.SendPropertyChanged("moduleId");
					this.OnmoduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblOperation_TblRoleOperation", Storage="_TblRoleOperation", ThisKey="operationId", OtherKey="operationId")]
		public EntitySet<TblRoleOperation> TblRoleOperation
		{
			get
			{
				return this._TblRoleOperation;
			}
			set
			{
				this._TblRoleOperation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblModule_TblOperation", Storage="_TblModule", ThisKey="moduleId", OtherKey="moduleId", IsForeignKey=true)]
		public TblModule TblModule
		{
			get
			{
				return this._TblModule.Entity;
			}
			set
			{
				TblModule previousValue = this._TblModule.Entity;
				if (((previousValue != value) 
							|| (this._TblModule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblModule.Entity = null;
						previousValue.TblOperation.Remove(this);
					}
					this._TblModule.Entity = value;
					if ((value != null))
					{
						value.TblOperation.Add(this);
						this._moduleId = value.moduleId;
					}
					else
					{
						this._moduleId = default(int);
					}
					this.SendPropertyChanged("TblModule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRoleOperation(TblRoleOperation entity)
		{
			this.SendPropertyChanging();
			entity.TblOperation = this;
		}
		
		private void detach_TblRoleOperation(TblRoleOperation entity)
		{
			this.SendPropertyChanging();
			entity.TblOperation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblRegistration")]
	public partial class TblRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _registrationId;
		
		private System.DateTime _registrationDate;
		
		private int _sectionId;
		
		private int _userId;
		
		private EntityRef<TblSection> _TblSection;
		
		private EntityRef<TblUser> _TblUser;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnregistrationIdChanging(int value);
    partial void OnregistrationIdChanged();
    partial void OnregistrationDateChanging(System.DateTime value);
    partial void OnregistrationDateChanged();
    partial void OnsectionIdChanging(int value);
    partial void OnsectionIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    #endregion
		
		public TblRegistration()
		{
			this._TblSection = default(EntityRef<TblSection>);
			this._TblUser = default(EntityRef<TblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registrationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int registrationId
		{
			get
			{
				return this._registrationId;
			}
			set
			{
				if ((this._registrationId != value))
				{
					this.OnregistrationIdChanging(value);
					this.SendPropertyChanging();
					this._registrationId = value;
					this.SendPropertyChanged("registrationId");
					this.OnregistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime registrationDate
		{
			get
			{
				return this._registrationDate;
			}
			set
			{
				if ((this._registrationDate != value))
				{
					this.OnregistrationDateChanging(value);
					this.SendPropertyChanging();
					this._registrationDate = value;
					this.SendPropertyChanged("registrationDate");
					this.OnregistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionId", DbType="Int NOT NULL")]
		public int sectionId
		{
			get
			{
				return this._sectionId;
			}
			set
			{
				if ((this._sectionId != value))
				{
					if (this._TblSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsectionIdChanging(value);
					this.SendPropertyChanging();
					this._sectionId = value;
					this.SendPropertyChanged("sectionId");
					this.OnsectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._TblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblSection_TblRegistration", Storage="_TblSection", ThisKey="sectionId", OtherKey="sectionId", IsForeignKey=true)]
		public TblSection TblSection
		{
			get
			{
				return this._TblSection.Entity;
			}
			set
			{
				TblSection previousValue = this._TblSection.Entity;
				if (((previousValue != value) 
							|| (this._TblSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblSection.Entity = null;
						previousValue.TblRegistration.Remove(this);
					}
					this._TblSection.Entity = value;
					if ((value != null))
					{
						value.TblRegistration.Add(this);
						this._sectionId = value.sectionId;
					}
					else
					{
						this._sectionId = default(int);
					}
					this.SendPropertyChanged("TblSection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblRegistration", Storage="_TblUser", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public TblUser TblUser
		{
			get
			{
				return this._TblUser.Entity;
			}
			set
			{
				TblUser previousValue = this._TblUser.Entity;
				if (((previousValue != value) 
							|| (this._TblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUser.Entity = null;
						previousValue.TblRegistration.Remove(this);
					}
					this._TblUser.Entity = value;
					if ((value != null))
					{
						value.TblRegistration.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("TblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblRole")]
	public partial class TblRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleId;
		
		private string _roleName;
		
		private string _roleSpanishName;
		
		private EntitySet<TblRoleOperation> _TblRoleOperation;
		
		private EntitySet<TblUser> _TblUser;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    partial void OnroleSpanishNameChanging(string value);
    partial void OnroleSpanishNameChanged();
    #endregion
		
		public TblRole()
		{
			this._TblRoleOperation = new EntitySet<TblRoleOperation>(new Action<TblRoleOperation>(this.attach_TblRoleOperation), new Action<TblRoleOperation>(this.detach_TblRoleOperation));
			this._TblUser = new EntitySet<TblUser>(new Action<TblUser>(this.attach_TblUser), new Action<TblUser>(this.detach_TblUser));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleSpanishName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string roleSpanishName
		{
			get
			{
				return this._roleSpanishName;
			}
			set
			{
				if ((this._roleSpanishName != value))
				{
					this.OnroleSpanishNameChanging(value);
					this.SendPropertyChanging();
					this._roleSpanishName = value;
					this.SendPropertyChanged("roleSpanishName");
					this.OnroleSpanishNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblRole_TblRoleOperation", Storage="_TblRoleOperation", ThisKey="roleId", OtherKey="roleId")]
		public EntitySet<TblRoleOperation> TblRoleOperation
		{
			get
			{
				return this._TblRoleOperation;
			}
			set
			{
				this._TblRoleOperation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblRole_TblUser", Storage="_TblUser", ThisKey="roleId", OtherKey="roleId")]
		public EntitySet<TblUser> TblUser
		{
			get
			{
				return this._TblUser;
			}
			set
			{
				this._TblUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRoleOperation(TblRoleOperation entity)
		{
			this.SendPropertyChanging();
			entity.TblRole = this;
		}
		
		private void detach_TblRoleOperation(TblRoleOperation entity)
		{
			this.SendPropertyChanging();
			entity.TblRole = null;
		}
		
		private void attach_TblUser(TblUser entity)
		{
			this.SendPropertyChanging();
			entity.TblRole = this;
		}
		
		private void detach_TblUser(TblUser entity)
		{
			this.SendPropertyChanging();
			entity.TblRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblRoleOperation")]
	public partial class TblRoleOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleOperationId;
		
		private int _roleId;
		
		private int _operationId;
		
		private EntityRef<TblOperation> _TblOperation;
		
		private EntityRef<TblRole> _TblRole;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleOperationIdChanging(int value);
    partial void OnroleOperationIdChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    partial void OnoperationIdChanging(int value);
    partial void OnoperationIdChanged();
    #endregion
		
		public TblRoleOperation()
		{
			this._TblOperation = default(EntityRef<TblOperation>);
			this._TblRole = default(EntityRef<TblRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleOperationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roleOperationId
		{
			get
			{
				return this._roleOperationId;
			}
			set
			{
				if ((this._roleOperationId != value))
				{
					this.OnroleOperationIdChanging(value);
					this.SendPropertyChanging();
					this._roleOperationId = value;
					this.SendPropertyChanged("roleOperationId");
					this.OnroleOperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL")]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._TblRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operationId", DbType="Int NOT NULL")]
		public int operationId
		{
			get
			{
				return this._operationId;
			}
			set
			{
				if ((this._operationId != value))
				{
					if (this._TblOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoperationIdChanging(value);
					this.SendPropertyChanging();
					this._operationId = value;
					this.SendPropertyChanged("operationId");
					this.OnoperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblOperation_TblRoleOperation", Storage="_TblOperation", ThisKey="operationId", OtherKey="operationId", IsForeignKey=true)]
		public TblOperation TblOperation
		{
			get
			{
				return this._TblOperation.Entity;
			}
			set
			{
				TblOperation previousValue = this._TblOperation.Entity;
				if (((previousValue != value) 
							|| (this._TblOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblOperation.Entity = null;
						previousValue.TblRoleOperation.Remove(this);
					}
					this._TblOperation.Entity = value;
					if ((value != null))
					{
						value.TblRoleOperation.Add(this);
						this._operationId = value.operationId;
					}
					else
					{
						this._operationId = default(int);
					}
					this.SendPropertyChanged("TblOperation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblRole_TblRoleOperation", Storage="_TblRole", ThisKey="roleId", OtherKey="roleId", IsForeignKey=true)]
		public TblRole TblRole
		{
			get
			{
				return this._TblRole.Entity;
			}
			set
			{
				TblRole previousValue = this._TblRole.Entity;
				if (((previousValue != value) 
							|| (this._TblRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblRole.Entity = null;
						previousValue.TblRoleOperation.Remove(this);
					}
					this._TblRole.Entity = value;
					if ((value != null))
					{
						value.TblRoleOperation.Add(this);
						this._roleId = value.roleId;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("TblRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblSection")]
	public partial class TblSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sectionId;
		
		private string _sectionName;
		
		private int _quota;
		
		private int _totalRegistered;
		
		private int _subjectId;
		
		private int _classroomId;
		
		private EntitySet<TblRegistration> _TblRegistration;
		
		private EntityRef<TblClassroom> _TblClassroom;
		
		private EntityRef<TblSubject> _TblSubject;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsectionIdChanging(int value);
    partial void OnsectionIdChanged();
    partial void OnsectionNameChanging(string value);
    partial void OnsectionNameChanged();
    partial void OnquotaChanging(int value);
    partial void OnquotaChanged();
    partial void OntotalRegisteredChanging(int value);
    partial void OntotalRegisteredChanged();
    partial void OnsubjectIdChanging(int value);
    partial void OnsubjectIdChanged();
    partial void OnclassroomIdChanging(int value);
    partial void OnclassroomIdChanged();
    #endregion
		
		public TblSection()
		{
			this._TblRegistration = new EntitySet<TblRegistration>(new Action<TblRegistration>(this.attach_TblRegistration), new Action<TblRegistration>(this.detach_TblRegistration));
			this._TblClassroom = default(EntityRef<TblClassroom>);
			this._TblSubject = default(EntityRef<TblSubject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sectionId
		{
			get
			{
				return this._sectionId;
			}
			set
			{
				if ((this._sectionId != value))
				{
					this.OnsectionIdChanging(value);
					this.SendPropertyChanging();
					this._sectionId = value;
					this.SendPropertyChanged("sectionId");
					this.OnsectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sectionName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string sectionName
		{
			get
			{
				return this._sectionName;
			}
			set
			{
				if ((this._sectionName != value))
				{
					this.OnsectionNameChanging(value);
					this.SendPropertyChanging();
					this._sectionName = value;
					this.SendPropertyChanged("sectionName");
					this.OnsectionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quota", DbType="Int NOT NULL")]
		public int quota
		{
			get
			{
				return this._quota;
			}
			set
			{
				if ((this._quota != value))
				{
					this.OnquotaChanging(value);
					this.SendPropertyChanging();
					this._quota = value;
					this.SendPropertyChanged("quota");
					this.OnquotaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalRegistered", DbType="Int NOT NULL")]
		public int totalRegistered
		{
			get
			{
				return this._totalRegistered;
			}
			set
			{
				if ((this._totalRegistered != value))
				{
					this.OntotalRegisteredChanging(value);
					this.SendPropertyChanging();
					this._totalRegistered = value;
					this.SendPropertyChanged("totalRegistered");
					this.OntotalRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectId", DbType="Int NOT NULL")]
		public int subjectId
		{
			get
			{
				return this._subjectId;
			}
			set
			{
				if ((this._subjectId != value))
				{
					if (this._TblSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectIdChanging(value);
					this.SendPropertyChanging();
					this._subjectId = value;
					this.SendPropertyChanged("subjectId");
					this.OnsubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classroomId", DbType="Int NOT NULL")]
		public int classroomId
		{
			get
			{
				return this._classroomId;
			}
			set
			{
				if ((this._classroomId != value))
				{
					if (this._TblClassroom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassroomIdChanging(value);
					this.SendPropertyChanging();
					this._classroomId = value;
					this.SendPropertyChanged("classroomId");
					this.OnclassroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblSection_TblRegistration", Storage="_TblRegistration", ThisKey="sectionId", OtherKey="sectionId")]
		public EntitySet<TblRegistration> TblRegistration
		{
			get
			{
				return this._TblRegistration;
			}
			set
			{
				this._TblRegistration.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblClassroom_TblSection", Storage="_TblClassroom", ThisKey="classroomId", OtherKey="classroomId", IsForeignKey=true)]
		public TblClassroom TblClassroom
		{
			get
			{
				return this._TblClassroom.Entity;
			}
			set
			{
				TblClassroom previousValue = this._TblClassroom.Entity;
				if (((previousValue != value) 
							|| (this._TblClassroom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblClassroom.Entity = null;
						previousValue.TblSection.Remove(this);
					}
					this._TblClassroom.Entity = value;
					if ((value != null))
					{
						value.TblSection.Add(this);
						this._classroomId = value.classroomId;
					}
					else
					{
						this._classroomId = default(int);
					}
					this.SendPropertyChanged("TblClassroom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblSubject_TblSection", Storage="_TblSubject", ThisKey="subjectId", OtherKey="subjectId", IsForeignKey=true)]
		public TblSubject TblSubject
		{
			get
			{
				return this._TblSubject.Entity;
			}
			set
			{
				TblSubject previousValue = this._TblSubject.Entity;
				if (((previousValue != value) 
							|| (this._TblSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblSubject.Entity = null;
						previousValue.TblSection.Remove(this);
					}
					this._TblSubject.Entity = value;
					if ((value != null))
					{
						value.TblSection.Add(this);
						this._subjectId = value.subjectId;
					}
					else
					{
						this._subjectId = default(int);
					}
					this.SendPropertyChanged("TblSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRegistration(TblRegistration entity)
		{
			this.SendPropertyChanging();
			entity.TblSection = this;
		}
		
		private void detach_TblRegistration(TblRegistration entity)
		{
			this.SendPropertyChanging();
			entity.TblSection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblSubject")]
	public partial class TblSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subjectId;
		
		private string _subjectName;
		
		private string _subjectDescription;
		
		private string _subjectPeriod;
		
		private EntitySet<TblSection> _TblSection;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubjectIdChanging(int value);
    partial void OnsubjectIdChanged();
    partial void OnsubjectNameChanging(string value);
    partial void OnsubjectNameChanged();
    partial void OnsubjectDescriptionChanging(string value);
    partial void OnsubjectDescriptionChanged();
    partial void OnsubjectPeriodChanging(string value);
    partial void OnsubjectPeriodChanged();
    #endregion
		
		public TblSubject()
		{
			this._TblSection = new EntitySet<TblSection>(new Action<TblSection>(this.attach_TblSection), new Action<TblSection>(this.detach_TblSection));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subjectId
		{
			get
			{
				return this._subjectId;
			}
			set
			{
				if ((this._subjectId != value))
				{
					this.OnsubjectIdChanging(value);
					this.SendPropertyChanging();
					this._subjectId = value;
					this.SendPropertyChanged("subjectId");
					this.OnsubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string subjectName
		{
			get
			{
				return this._subjectName;
			}
			set
			{
				if ((this._subjectName != value))
				{
					this.OnsubjectNameChanging(value);
					this.SendPropertyChanging();
					this._subjectName = value;
					this.SendPropertyChanged("subjectName");
					this.OnsubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string subjectDescription
		{
			get
			{
				return this._subjectDescription;
			}
			set
			{
				if ((this._subjectDescription != value))
				{
					this.OnsubjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._subjectDescription = value;
					this.SendPropertyChanged("subjectDescription");
					this.OnsubjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectPeriod", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string subjectPeriod
		{
			get
			{
				return this._subjectPeriod;
			}
			set
			{
				if ((this._subjectPeriod != value))
				{
					this.OnsubjectPeriodChanging(value);
					this.SendPropertyChanging();
					this._subjectPeriod = value;
					this.SendPropertyChanged("subjectPeriod");
					this.OnsubjectPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblSubject_TblSection", Storage="_TblSection", ThisKey="subjectId", OtherKey="subjectId")]
		public EntitySet<TblSection> TblSection
		{
			get
			{
				return this._TblSection;
			}
			set
			{
				this._TblSection.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblSection(TblSection entity)
		{
			this.SendPropertyChanging();
			entity.TblSubject = this;
		}
		
		private void detach_TblSection(TblSection entity)
		{
			this.SendPropertyChanging();
			entity.TblSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblUser")]
	public partial class TblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _rut;
		
		private string _names;
		
		private string _lastNames;
		
		private string _phone;
		
		private string _password;
		
		private int _roleId;
		
		private EntitySet<TblRegistration> _TblRegistration;
		
		private EntityRef<TblRole> _TblRole;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnrutChanging(string value);
    partial void OnrutChanged();
    partial void OnnamesChanging(string value);
    partial void OnnamesChanged();
    partial void OnlastNamesChanging(string value);
    partial void OnlastNamesChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public TblUser()
		{
			this._TblRegistration = new EntitySet<TblRegistration>(new Action<TblRegistration>(this.attach_TblRegistration), new Action<TblRegistration>(this.detach_TblRegistration));
			this._TblRole = default(EntityRef<TblRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rut", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string rut
		{
			get
			{
				return this._rut;
			}
			set
			{
				if ((this._rut != value))
				{
					this.OnrutChanging(value);
					this.SendPropertyChanging();
					this._rut = value;
					this.SendPropertyChanged("rut");
					this.OnrutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_names", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string names
		{
			get
			{
				return this._names;
			}
			set
			{
				if ((this._names != value))
				{
					this.OnnamesChanging(value);
					this.SendPropertyChanging();
					this._names = value;
					this.SendPropertyChanged("names");
					this.OnnamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastNames", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string lastNames
		{
			get
			{
				return this._lastNames;
			}
			set
			{
				if ((this._lastNames != value))
				{
					this.OnlastNamesChanging(value);
					this.SendPropertyChanging();
					this._lastNames = value;
					this.SendPropertyChanged("lastNames");
					this.OnlastNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL")]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._TblRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblUser_TblRegistration", Storage="_TblRegistration", ThisKey="userId", OtherKey="userId")]
		public EntitySet<TblRegistration> TblRegistration
		{
			get
			{
				return this._TblRegistration;
			}
			set
			{
				this._TblRegistration.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblRole_TblUser", Storage="_TblRole", ThisKey="roleId", OtherKey="roleId", IsForeignKey=true)]
		public TblRole TblRole
		{
			get
			{
				return this._TblRole.Entity;
			}
			set
			{
				TblRole previousValue = this._TblRole.Entity;
				if (((previousValue != value) 
							|| (this._TblRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblRole.Entity = null;
						previousValue.TblUser.Remove(this);
					}
					this._TblRole.Entity = value;
					if ((value != null))
					{
						value.TblUser.Add(this);
						this._roleId = value.roleId;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("TblRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblRegistration(TblRegistration entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = this;
		}
		
		private void detach_TblRegistration(TblRegistration entity)
		{
			this.SendPropertyChanging();
			entity.TblUser = null;
		}
	}
}
#pragma warning restore 1591
